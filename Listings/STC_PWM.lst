C51 COMPILER V9.00   STC_PWM                                                               05/04/2019 17:53:24 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE STC_PWM
OBJECT MODULE PLACED IN .\Objects\STC_PWM.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE STC_PWM.c LARGE OMF2 BROWSE DEBUG PRINT(.\Listings\STC_PWM.lst) OBJECT(.\Ob
                    -jects\STC_PWM.obj)

line level    source

   1          #include <stc15w.h>
   2          #include "STC_PWM.h"
   3          #include "AD.h"
   4          #include <math.h>
   5          
   6          
   7          #define STC_PWM_FREQ    150000
   8          #define STC_PWM_VUPTIME 2
   9          #define  PWM_DeadZone  5   /*À¿«¯ ±÷” ˝,6~24÷Æº‰*/ 
  10          
  11          
  12          
  13          sfr PIN_SW2 =   0xba;
  14          sbit Drive_SD=P0^4;   //1: πÿ±’    0: πƒ‹
  15          
  16          static u16 stcPwmTime = 0;
  17          static u16 stcPwm_Curv = 0;
  18          static u16 stmPwm_Tarv = 0;
  19          static u16 stmPwm_Freq = 0;
  20          
  21          u8 Value_50=151;  //50hz?? 
  22          u8 Value_60=126;  //60hz?? 
  23          
  24          
  25          
  26          
  27          u16   T_SinTable[ ]={
  28          1200,  1238,  1275,  1313, 1350,  1388, 1425,  1462,  1498,  1535,  1571, 
  29           1606, 1641, 1676,  1711,  1744,  1778,  1810,  1843,  1874,  1905,  1935, 
  30           1964, 1993,  2021,  2048,  2074,  2100,  2124,  2148,  2170, 
  31           2192, 2213,  2232,  2251,  2269,  2285,  2301,  2315,  2329, 
  32           2341, 2352,  2362,  2371,  2379,  2385,  2390,  2395,  2398, 
  33           2399, 2400,  2399,  2398,  2395,  2391,  2385,  2379,  2371, 
  34           2363, 2353,  2342,  2330,  2316,  2302,  2287,  2270,  2252, 
  35           2234, 2214,  2194,  2172,  2149,  2126,  2102,  2076,  2050, 
  36           2023, 1995,  1967,  1937,  1907,  1876,  1845,  1813,  1780, 
  37           1747, 1713,  1679,  1644,  1609,  1573,  1537,  1501,  1464, 
  38           1428, 1390,  1353,  1316,  1278,  1241,  1203,  1165,  1128, 
  39           1090, 1053,  1015,  978,  941,  905,  868,  832,  797, 
  40           761, 726,  692,  658,  625,  592,  560,  528,  497, 
  41           467, 438,  409,  381,  354,  328,  302,  278,  254, 
  42           231, 210,  189,  169,  150,  133,  116,  100,  86, 
  43           72, 60,  49,  39,  30,  22,  15,  10,  6, 
  44           3, 1,  0,  0,  2,  5,  9,  14,  20, 
  45           28, 37,  46,  57,  69,  83,  97,  112,  129, 
  46           146, 165,  184,  205,  226,  249,  272,  297,  322, 
  47           348, 375,  403,  431,  460,  490,  521,  553,  585, 
  48           617, 650,  684,  718,  753,  788,  824,  860,  896, 
  49           933, 970,  1007,  1044,  1081,  1119,  1157,  
  50          };
  51          
  52          //œ»Ω¯œ»≥ˆ¬À≤®À„∑® 
  53          #define FILTER_N 12
  54          int filter_buf[FILTER_N + 1];
C51 COMPILER V9.00   STC_PWM                                                               05/04/2019 17:53:24 PAGE 2   

  55          int Filter() {
  56   1          int i;
  57   1          int filter_sum = 0;
  58   1          filter_buf[FILTER_N] = (int)(GetADCResult(0));
  59   1          for(i = 0; i < FILTER_N; i++) {
  60   2              filter_buf[i] = filter_buf[i + 1]; // À˘”– ˝æ›◊Û“∆£¨µÕŒª»‘µÙ
  61   2              filter_sum += filter_buf[i];
  62   2          }
  63   1          return (int)(filter_sum / FILTER_N);
  64   1      }
  65          static u16 stmPwm_InVol = 0;
  66          void STC_PWM_Init(u16 freq)
  67          {
  68   1              u8 i;
  69   1              for(i=0;i<100;i++)
  70   1              {
  71   2                      stmPwm_InVol = Get_voltage();
  72   2              }
  73   1              Value_50=3000/stmPwm_InVol*1.414;
  74   1              Value_60=2500/stmPwm_InVol*1.414;
  75   1      
  76   1              
  77   1              
  78   1              PIN_SW2 |= 0x80;                //‰ΩøËÉΩËÆøÈóÆXSFR
  79   1              PWMCFG = 0x00;                  //ÈÖçÁΩÆPWMÁöÑËæìÂá∫ÂàùÂßãÁîµÂπ≥‰∏∫‰ΩéÁîµÂπ≥
  80   1      
  81   1              PWMCKS = 0x00;                  //ÈÄâÊã©PWMÁöÑÊó∂Èíü‰∏∫Fosc/1
  82   1      
  83   1              PWMC = (STC_PWM_FREQ/freq) + (STC_PWM_FREQ%freq);                   //ËÆæÁΩÆPWMÂë®Êúü
  84   1              /*PWM3 ÈÖçÁΩÆ*/ 
  85   1              PWM3T1 = 0;                //ËÆæÁΩÆPWM3Á¨¨1Ê¨°ÂèçËΩ¨ÁöÑPWMËÆ°Êï∞
  86   1              PWM3T2 = 100;                //ËÆæÁΩÆPWM3Á¨¨2Ê¨°ÂèçËΩ¨ÁöÑPWMËÆ°Êï∞
  87   1              PWM3CR = 0x00;                  //ÈÄâÊã©PWM3ËæìÂá∫Âà∞P2.1,‰∏ç‰ΩøËÉΩPWM3‰∏≠Êñ≠
  88   1              PWMCR |= 0x02;                   //‰ΩøËÉΩPWM‰ø°Âè∑ËæìÂá∫
  89   1              PWMCFG &= ~0x02;                 //ÈÖçÁΩÆPWMÁöÑËæìÂá∫ÂàùÂßãÁîµÂπ≥‰∏∫‰ΩéÁîµÂπ≥
  90   1              P21=0;
  91   1      
  92   1      
  93   1      
  94   1          PWM4T1 = 0;                //ËÆæÁΩÆPWM4Á¨¨1Ê¨°ÂèçËΩ¨ÁöÑPWMËÆ°Êï∞
  95   1          PWM4T2 = 100+PWM_DeadZone;                //ËÆæÁΩÆPWM4Á¨¨2Ê¨°ÂèçËΩ¨ÁöÑPWMËÆ°Êï∞
  96   1          PWM4CR = 0x00;                  //ÈÄâÊã©PWM4ËæìÂá∫Âà∞P2.2,‰∏ç‰ΩøËÉΩPWM4‰∏≠Êñ≠
  97   1          PWMCR |= 0x04;                  //‰ΩøËÉΩPWM‰ø°Âè∑ËæìÂá∫     /*PWM4 ÈÖçÁΩÆ*/
  98   1          PWMCFG|= 0x04;                 //ÈÖçÁΩÆPWMÁöÑËæìÂá∫ÂàùÂßãÁîµÂπ≥‰∏∫È´òÁîµÂπ≥
  99   1          P22=1;
 100   1      
 101   1      
 102   1      
 103   1          PWM6T1 = 0;
 104   1          PWM6T2 = 100;
 105   1      
 106   1          PWM6CR = 0x00;
 107   1          PWMCR |= 0x10;
 108   1          PWMCFG &=~0x10;
 109   1          P16=0;                              
 110   1      
 111   1      
 112   1      
 113   1          PWM7T1 = 0;
 114   1          PWM7T2 = 100+PWM_DeadZone;
 115   1      
 116   1          PWM7CR = 0x00;
C51 COMPILER V9.00   STC_PWM                                                               05/04/2019 17:53:24 PAGE 3   

 117   1          PWMCR |= 0x20;
 118   1          PWMCFG|= 0x20;
 119   1          P17=1;
 120   1      
 121   1          PWMCR |= 0x40;
 122   1          PWMCR |= 0x80;
 123   1      
 124   1          //          PWMFDCR |=0x28;  //‰ΩøËÉΩpwmÂ§ñÈÉ®ÂºÇÂ∏∏Ê£ÄÊµã
 125   1          //          PWMFDCR |=0x08;  //‰ΩøËÉΩpwmÂ§ñÈÉ®ÂºÇÂ∏∏Ê£ÄÊµã‰∏≠Êñ≠
 126   1          //          PWMFDCR |=0x02;  //‰ΩøËÉΩpwmÂ§ñÈÉ®ÂºÇÂ∏∏Ê£ÄÊµã  ËÆæÁΩÆÊ£ÄÊµãÂè£‰∏∫P24  È´òÁîµÂπ≥Ëß¶Âèë
 127   1      
 128   1          PIN_SW2 &= ~0x80;
 129   1      
 130   1          EA = 1;
 131   1      }
 132          
 133          
 134          
 135          //Ëé∑Âèñ‰∏çÂêåÁÇπÊï∞ÁöÑÊ≠£Âº¶Ê≥¢Êï∞ÊçÆ
 136          //point: ‰∏ÄÂë®ÊúüÂÜÖÁöÑÂèñÊ†∑ÁÇπÊï∞
 137          //maxnum: ‰∏ÄÂë®ÊúüÂÜÖÂØπÂ∫îDAËæìÂá∫ÊúÄÂ§ßÂÄº
 138          //freq È¢ëÁéá 
 139          //v ÈááÈõÜÂà∞ÁöÑÁîµÂéãÂÄº
 140          
 141          void GetSinTab(u16 point,u16 maxnum,u16 freq)
 142          {
 143   1              u16 i=0; 
 144   1              float x,y;   //??
 145   1              float jiao;//?? ???
 146   1              
 147   1              jiao=360.000/point; 
 148   1              
 149   1              if(freq==0x50)
 150   1               {
 151   2                      maxnum=maxnum*Value_50+1;//1.414*107.14+1;
 152   2                      if(maxnum>3000)
 153   2                              maxnum=3000;
 154   2                      for(i=0;i<point;i++)
 155   2                      {
 156   3                              y=jiao*i;    //?????
 157   3                              x=y*0.01744; //?????  ??=??*(p/180)
 158   3      
 159   3                              T_SinTable[i]=1500+(maxnum/2-6)*sin(x)+0.5;//+0.5 ?????????????
 160   3                      }
 161   2              }
 162   1              else if(freq==0x60)
 163   1              {
 164   2                      maxnum=maxnum*Value_60+1;//89.28*1.414+1;
 165   2                      if(maxnum>2500)
 166   2                              maxnum=2500;
 167   2                      for(i=0;i<point;i++)
 168   2                      {
 169   3                              y=jiao*i;    //?????
 170   3                              x=y*0.01744; //?????  ??=??*(p/180)
 171   3                              T_SinTable[i]=1250+(maxnum/2-6)*sin(x)+0.5;//+0.5 ?????????????
 172   3                      }               
 173   2              }
 174   1      }       
 175          
 176          u16 Get_voltage(void)
 177          {
 178   1          u16  ad_temp=0;
C51 COMPILER V9.00   STC_PWM                                                               05/04/2019 17:53:24 PAGE 4   

 179   1          ad_temp=Filter();
 180   1          ad_temp=ad_temp*54;
 181   1          return (ad_temp/1000);
 182   1      }
 183          
 184          //void Updata_Plv(u8 plv)
 185          //{
 186          //    PIN_SW2 |= 0x80;                // πƒ‹∑√Œ XSFR
 187          //    if(plv==0x50)
 188          //        PWMC = 3000;                   //…Ë÷√PWM÷‹∆⁄
 189          //    else if(plv==0x60)
 190          //        PWMC = 2500;                   //…Ë÷√PWM÷‹∆⁄  
 191          //    PIN_SW2 &= ~0x80;
 192          //}
 193          void STC_PWM_Task(u16 *v_current,u16 v_target,u16 freq)
 194          {
 195   1              if((*v_current)!=v_target)
 196   1              {
 197   2                      if((*v_current)>v_target)
 198   2                      {
 199   3                              (*v_current)--;
 200   3                      }
 201   2                      else
 202   2                      {
 203   3                              (*v_current)++;
 204   3                      }
 205   2                      GetSinTab(200,*v_current,freq); //Ëé∑ÂèñsinÊï∞ÊçÆ       
 206   2                      Drive_SD=0; //‰ΩøËÉΩIR2110ËäØÁâá
 207   2              }
 208   1      }
 209          
 210          void STC_PWM_SetVolage(u16 freq,u16 vol)
 211          {
 212   1              PIN_SW2 |= 0x80;                // πƒ‹∑√Œ XSFR
 213   1              PWMC = (STC_PWM_FREQ/freq) + (STC_PWM_FREQ%freq);
 214   1              PIN_SW2 &= ~0x80;
 215   1              stmPwm_Tarv=vol;
 216   1              stmPwm_Freq = freq;
 217   1      }
 218          void SendData(u8 dat);
 219          void STC_PWM_Timer(void)
 220          {
 221   1              if(0 == stcPwmTime)
 222   1              {
 223   2                      stcPwmTime = STC_PWM_VUPTIME;
 224   2                      /*SendData(0x55);
 225   2                      SendData(stcPwm_Curv);
 226   2                      SendData(stcPwm_Curv>>8);
 227   2                      SendData(stcPwm_Curv>>16);
 228   2                      SendData(stcPwm_Curv>>24);*/
 229   2                      STC_PWM_Task(&stcPwm_Curv,stmPwm_Tarv,stmPwm_Freq);
 230   2              }
 231   1              stcPwmTime--;
 232   1      }
 233          static u16 stcPwm_P = 0;
 234          void pwm_isr() interrupt 22 using 1
 235          {
 236   1          u16 j=0;
 237   1          if (PWMIF & CBIF)
 238   1          {
 239   2                      
 240   2              PWMIF &= ~CBIF; //Ê∏ÖÈô§Ê†áÂøó
C51 COMPILER V9.00   STC_PWM                                                               05/04/2019 17:53:24 PAGE 5   

 241   2              PIN_SW2 |= 0x80;  //‰ΩøËÉΩËÆøÈóÆXSFR
 242   2                      
 243   2              j=T_SinTable[stcPwm_P];
 244   2                      SendData(j);
 245   2              PWM3T2=j;
 246   2              PWM6T2=j;
 247   2              j+=PWM_DeadZone;
 248   2              PWM4T2=j;
 249   2              PWM7T2=j;
 250   2      
 251   2              PIN_SW2 &= ~0x80;
 252   2              if(stcPwm_P++>200)
 253   2                      {
 254   3                  stcPwm_P=0;
 255   3                      }
 256   2          }
 257   1      }
 258          void pwmError_isr() interrupt 23 using 1  //Áü≠Ë∑Ø‰øùÊä§
 259          {
 260   1      
 261   1          PWMFDCR &= ~FDIF; //Ê∏ÖÈô§Ê†áÂøó
 262   1          // Drive_SD=1; //ÂÖ≥Èó≠IR2110ËäØÁâá
 263   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1471    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    440      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
